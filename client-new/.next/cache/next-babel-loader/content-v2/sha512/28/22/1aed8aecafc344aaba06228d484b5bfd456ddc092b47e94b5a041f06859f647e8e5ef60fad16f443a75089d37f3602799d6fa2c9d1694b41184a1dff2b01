{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hari/WebstormProjects/ecommerce-MERN/client-new/src/header/sidebar/sidebar.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { SidebarMobileLoader, SidebarLoader } from 'components/placeholder/placeholder';\nimport { CategoryWrapper } from './sidebar.style';\nimport useFetch from \"@/hooks/useFetch\";\nimport { API_BASE_URL } from \"@/utils/config\";\n\nconst SidebarCategory = ({\n  deviceType: {\n    mobile,\n    tablet,\n    desktop\n  }\n}) => {\n  const [data, isLoading] = useFetch(`${API_BASE_URL}/api/v1/category/sub`);\n  const router = useRouter();\n  const {\n    pathname,\n    query\n  } = router;\n  const selectedQueries = query.category;\n\n  const onCategoryClick = slug => {\n    const {\n      type\n    } = query,\n          rest = _objectWithoutProperties(query, [\"type\"]);\n\n    if (type) {\n      router.push({\n        pathname,\n        query: _objectSpread(_objectSpread({}, rest), {}, {\n          category: slug\n        })\n      }, {\n        pathname: `/${type}`,\n        query: _objectSpread(_objectSpread({}, rest), {}, {\n          category: slug\n        })\n      });\n    } else {\n      router.push({\n        pathname,\n        query: _objectSpread(_objectSpread({}, rest), {}, {\n          category: slug\n        })\n      });\n    }\n  };\n\n  const isSidebarSticky = true;\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(SidebarMobileLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!data) {\n    if (mobile || tablet) {\n      return /*#__PURE__*/_jsxDEV(SidebarMobileLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(SidebarLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CategoryWrapper, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\nexport default SidebarCategory;","map":{"version":3,"sources":["/home/hari/WebstormProjects/ecommerce-MERN/client-new/src/header/sidebar/sidebar.tsx"],"names":["React","useRouter","SidebarMobileLoader","SidebarLoader","CategoryWrapper","useFetch","API_BASE_URL","SidebarCategory","deviceType","mobile","tablet","desktop","data","isLoading","router","pathname","query","selectedQueries","category","onCategoryClick","slug","type","rest","push","isSidebarSticky"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAOA,SACIC,mBADJ,EAEIC,aAFJ,QAGO,oCAHP;AAIA,SACIC,eADJ,QAMO,iBANP;AASA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAAQC,YAAR,QAA2B,gBAA3B;;AAWA,MAAMC,eAA+C,GAAG,CAAC;AAACC,EAAAA,UAAU,EAAE;AAACC,IAAAA,MAAD;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB;AAAb,CAAD,KAA6C;AACjG,QAAM,CAACC,IAAD,EAAOC,SAAP,IAAoBR,QAAQ,CAAE,GAAEC,YAAa,sBAAjB,CAAlC;AAEA,QAAMQ,MAAM,GAAGb,SAAS,EAAxB;AAEA,QAAM;AAACc,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAoBF,MAA1B;AACA,QAAMG,eAAe,GAAGD,KAAK,CAACE,QAA9B;;AAGA,QAAMC,eAAe,GAAIC,IAAD,IAAkB;AACtC,UAAM;AAACC,MAAAA;AAAD,QAAkBL,KAAxB;AAAA,UAAgBM,IAAhB,4BAAwBN,KAAxB;;AACA,QAAIK,IAAJ,EAAU;AACNP,MAAAA,MAAM,CAACS,IAAP,CACI;AACIR,QAAAA,QADJ;AAEIC,QAAAA,KAAK,kCAAMM,IAAN;AAAYJ,UAAAA,QAAQ,EAAEE;AAAtB;AAFT,OADJ,EAKI;AACIL,QAAAA,QAAQ,EAAG,IAAGM,IAAK,EADvB;AAEIL,QAAAA,KAAK,kCAAMM,IAAN;AAAYJ,UAAAA,QAAQ,EAAEE;AAAtB;AAFT,OALJ;AAUH,KAXD,MAWO;AACHN,MAAAA,MAAM,CAACS,IAAP,CAAY;AACRR,QAAAA,QADQ;AAERC,QAAAA,KAAK,kCAAMM,IAAN;AAAYJ,UAAAA,QAAQ,EAAEE;AAAtB;AAFG,OAAZ;AAIH;AACJ,GAnBD;;AAoBA,QAAMI,eAAe,GAAG,IAAxB;;AACA,MAAIX,SAAJ,EAAe;AACX,wBAAO,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,MAAI,CAACD,IAAL,EAAW;AACP,QAAIH,MAAM,IAAIC,MAAd,EAAsB;AAClB,0BAAO,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,wBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AA0DH,CAjGD;;AAmGA,eAAeH,eAAf","sourcesContent":["import React from 'react';\nimport {useRouter} from 'next/router';\nimport Link from 'next/link';\nimport Sticky from 'react-stickynode';\nimport {Scrollbars} from 'react-custom-scrollbars';\nimport Popover from 'components/popover/popover';\nimport {ArrowDropDown} from 'assets/icons/ArrowDropDown';\nimport {CategoryIcon} from 'assets/icons/CategoryIcon';\nimport {\n    SidebarMobileLoader,\n    SidebarLoader,\n} from 'components/placeholder/placeholder';\nimport {\n    CategoryWrapper,\n    TreeWrapper,\n    PopoverHandler,\n    PopoverWrapper,\n    SidebarWrapper,\n} from './sidebar.style';\nimport {SIDEBAR_DATA} from '../site-navigation'\nimport {TreeMenu} from 'components/tree-menu/tree-menu';\nimport useFetch from \"@/hooks/useFetch\";\nimport {API_BASE_URL} from \"@/utils/config\";\n\n\ntype SidebarCategoryProps = {\n    deviceType: {\n        mobile: boolean;\n        tablet: boolean;\n        desktop: boolean;\n    };\n};\n\nconst SidebarCategory: React.FC<SidebarCategoryProps> = ({deviceType: {mobile, tablet, desktop}}) => {\n    const [data, isLoading] = useFetch(`${API_BASE_URL}/api/v1/category/sub`)\n\n    const router = useRouter();\n\n    const {pathname, query} = router;\n    const selectedQueries = query.category;\n\n\n    const onCategoryClick = (slug: string) => {\n        const {type, ...rest} = query;\n        if (type) {\n            router.push(\n                {\n                    pathname,\n                    query: {...rest, category: slug},\n                },\n                {\n                    pathname: `/${type}`,\n                    query: {...rest, category: slug},\n                }\n            );\n        } else {\n            router.push({\n                pathname,\n                query: {...rest, category: slug},\n            });\n        }\n    };\n    const isSidebarSticky = true\n    if (isLoading) {\n        return <SidebarMobileLoader/>;\n    }\n    if (!data) {\n        if (mobile || tablet) {\n            return <SidebarMobileLoader/>;\n        }\n        return <SidebarLoader/>;\n    }\n    return (\n        <CategoryWrapper>\n            {/*<PopoverWrapper>*/}\n            {/*    <Popover*/}\n            {/*        handler={*/}\n            {/*            <PopoverHandler>*/}\n            {/*                <div>*/}\n            {/*                    <CategoryIcon/>*/}\n            {/*                    Select your Category*/}\n            {/*                </div>*/}\n            {/*                <div>*/}\n            {/*                    <ArrowDropDown/>*/}\n            {/*                </div>*/}\n            {/*            </PopoverHandler>*/}\n            {/*        }*/}\n            {/*        className=\"category-popover\"*/}\n            {/*        content={*/}\n            {/*            <>*/}\n            {/*                <TreeMenu*/}\n            {/*                    data={data}*/}\n            {/*                    onClick={onCategoryClick}*/}\n            {/*                    active={selectedQueries}*/}\n            {/*                />*/}\n            {/*            </>*/}\n            {/*        }*/}\n            {/*    />*/}\n            {/*</PopoverWrapper>*/}\n\n            {/*<SidebarWrapper>*/}\n            {/*    <Sticky enabled={isSidebarSticky} top={110} className={\"leftSideBar\"}>*/}\n            {/*        <Scrollbars*/}\n            {/*            universal*/}\n            {/*            autoHide*/}\n            {/*            autoHeight*/}\n            {/*            autoHeightMax={1000}*/}\n            {/*            renderView={(props) => (*/}\n            {/*                <div*/}\n            {/*                    {...props}*/}\n            {/*                    style={{*/}\n            {/*                        ...props.style,*/}\n            {/*                        marginLeft: props.style.marginRight,*/}\n            {/*                        marginRight: props.style.marginRight,*/}\n            {/*                    }}*/}\n            {/*                />*/}\n            {/*            )}*/}\n            {/*        >*/}\n            {/*            <TreeWrapper>*/}\n            {/*                <TreeMenu*/}\n            {/*                    data={data}*/}\n            {/*                    onClick={onCategoryClick}*/}\n            {/*                    active={selectedQueries}*/}\n            {/*                />*/}\n            {/*            </TreeWrapper>*/}\n            {/*        </Scrollbars>*/}\n            {/*    </Sticky>*/}\n            {/*</SidebarWrapper>*/}\n        </CategoryWrapper>\n    );\n};\n\nexport default SidebarCategory;\n"]},"metadata":{},"sourceType":"module"}