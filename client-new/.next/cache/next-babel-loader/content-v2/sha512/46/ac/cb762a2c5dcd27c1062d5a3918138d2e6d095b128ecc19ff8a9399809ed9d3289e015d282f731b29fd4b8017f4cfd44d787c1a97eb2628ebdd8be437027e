{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hari/WebstormProjects/ecommerce-MERN/client-new/src/components/tree-menu/tree-menu.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { usePrevious, useMeasure } from '../../assets/hooks';\nimport { useSpring, animated } from 'react-spring';\nimport { Frame, Title, Content, Header, IconWrapper } from './tree-menu.style';\nimport { Button } from 'components/button/button';\nimport { ArrowNext } from 'assets/icons/ArrowNext';\nimport { CategoryIcon } from \"@/header/menu/left-menu/LeftMenu\";\nconst Tree = /*#__PURE__*/React.memo(({\n  children,\n  name,\n  icon,\n  // isOpen,\n  onClick,\n  dropdown,\n  depth,\n  defaultOpen = false\n}) => {\n  const {\n    0: isOpen,\n    1: setOpen\n  } = useState(defaultOpen);\n  useEffect(() => {\n    setOpen(defaultOpen);\n  }, [defaultOpen]);\n  const previous = usePrevious(isOpen);\n  const [bind, {\n    height: viewHeight\n  }] = useMeasure();\n  const {\n    height,\n    opacity,\n    transform\n  } = useSpring({\n    from: {\n      height: 0,\n      opacity: 0,\n      transform: 'translate3d(20px,0,0)'\n    },\n    to: {\n      height: isOpen ? viewHeight : 0,\n      opacity: isOpen ? 1 : 0,\n      transform: `translate3d(${isOpen ? 0 : 20}px,0,0)`\n    }\n  }); // const Icon = icon ? Icons[icon] : depth === 'child' ? Icons['Minus'] : null;\n  // @ts-ignore\n\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    depth: depth,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      open: isOpen,\n      depth: depth,\n      className: depth,\n      children: [/*#__PURE__*/_jsxDEV(IconWrapper, {\n        depth: depth,\n        children: /*#__PURE__*/_jsxDEV(CategoryIcon, {\n          link: icon,\n          height: \"25px\",\n          width: \"25px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Title, {\n        onClick: onClick,\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), dropdown === true && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setOpen(!isOpen),\n        variant: \"text\",\n        className: \"toggleButton\",\n        children: /*#__PURE__*/_jsxDEV(ArrowNext, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      style: {\n        opacity,\n        height: isOpen && previous === isOpen ? 'auto' : height\n      },\n      children: /*#__PURE__*/_jsxDEV(animated.div, _objectSpread(_objectSpread({\n        style: {\n          transform\n        }\n      }, bind), {}, {\n        children: children\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 13\n  }, this);\n});\nexport const TreeMenu = ({\n  data,\n  className,\n  onClick,\n  active\n}) => {\n  const handler = children => {\n    return children.map(subOption => {\n      if (!subOption.subCategory) {\n        return /*#__PURE__*/_jsxDEV(Tree, {\n          name: subOption.name,\n          icon: subOption === null || subOption === void 0 ? void 0 : subOption.image,\n          depth: \"child\",\n          onClick: () => onClick(subOption.id),\n          defaultOpen: active === subOption.id\n        }, subOption._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Tree, {\n        name: subOption.name,\n        icon: subOption.image,\n        dropdown: !subOption.subCategory.length ? false : true,\n        depth: \"parent\",\n        onClick: () => onClick(subOption.id),\n        defaultOpen: active === subOption.id || subOption.subCategory.some(item => item.id === active),\n        children: handler(subOption.subCategory)\n      }, subOption._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: handler(data === null || data === void 0 ? void 0 : data.data)\n  }, void 0, false);\n};","map":{"version":3,"sources":["/home/hari/WebstormProjects/ecommerce-MERN/client-new/src/components/tree-menu/tree-menu.tsx"],"names":["React","useState","useEffect","usePrevious","useMeasure","useSpring","animated","Frame","Title","Content","Header","IconWrapper","Button","ArrowNext","CategoryIcon","Tree","memo","children","name","icon","onClick","dropdown","depth","defaultOpen","isOpen","setOpen","previous","bind","height","viewHeight","opacity","transform","from","to","TreeMenu","data","className","active","handler","map","subOption","subCategory","image","id","_id","length","some","item"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {usePrevious, useMeasure} from '../../assets/hooks';\nimport {useSpring, animated} from 'react-spring';\nimport {Frame, Title, Content, Header, IconWrapper} from './tree-menu.style';\nimport {Button} from 'components/button/button';\nimport {ArrowNext} from 'assets/icons/ArrowNext';\n\nimport * as Icons from 'assets/icons/category-icons';\nimport {CategoryIcon} from \"@/header/menu/left-menu/LeftMenu\";\n\nconst Tree = React.memo(\n    ({\n         children,\n         name,\n         icon,\n         // isOpen,\n         onClick,\n         dropdown,\n         depth,\n         defaultOpen = false,\n     }: any) => {\n        const [isOpen, setOpen] = useState(defaultOpen);\n        useEffect(() => {\n            setOpen(defaultOpen);\n        }, [defaultOpen]);\n        const previous = usePrevious(isOpen);\n        const [bind, {height: viewHeight}] = useMeasure();\n        const {height, opacity, transform} = useSpring<any>({\n            from: {height: 0, opacity: 0, transform: 'translate3d(20px,0,0)'},\n            to: {\n                height: isOpen ? viewHeight : 0,\n                opacity: isOpen ? 1 : 0,\n                transform: `translate3d(${isOpen ? 0 : 20}px,0,0)`,\n            },\n        });\n        // const Icon = icon ? Icons[icon] : depth === 'child' ? Icons['Minus'] : null;\n        // @ts-ignore\n        return (\n            <Frame depth={depth}>\n                <Header open={isOpen} depth={depth} className={depth}>\n                    <IconWrapper depth={depth}>\n                        <CategoryIcon link={icon} height={\"25px\"} width={\"25px\"} />\n                    </IconWrapper>\n                    <Title onClick={onClick}>{name}</Title>\n\n                    {dropdown === true && (\n                        <Button\n                            onClick={() => setOpen(!isOpen)}\n                            variant='text'\n                            className='toggleButton'\n                        >\n\n                            <ArrowNext/>\n                        </Button>\n                    )}\n                </Header>\n                <Content\n                    style={{\n                        opacity,\n                        height: isOpen && previous === isOpen ? 'auto' : height,\n                    }}\n                >\n                    <animated.div style={{transform}} {...bind} children={children}/>\n                </Content>\n            </Frame>\n        );\n    }\n);\n\ntype Props = {\n    className?: any;\n    data: any;\n    onClick: (slug: string) => void;\n    active?: string | string[];\n};\nexport const TreeMenu: React.FC<Props> = ({\n                                              data,\n                                              className,\n                                              onClick,\n                                              active,\n                                          }) => {\n    const handler = (children: any) => {\n        return children.map((subOption: any) => {\n            if (!subOption.subCategory) {\n                return (\n                    <Tree\n                        key={subOption._id}\n                        name={subOption.name}\n                        icon={subOption?.image}\n                        depth='child'\n                        onClick={() => onClick(subOption.id)}\n                        defaultOpen={active === subOption.id}\n                    />\n                );\n            }\n            return (\n                <Tree\n                    key={subOption._id}\n                    name={subOption.name}\n                    icon={subOption.image}\n                    dropdown={!subOption.subCategory.length ? false : true}\n                    depth='parent'\n                    onClick={() => onClick(subOption.id)}\n                    defaultOpen={\n                        active === subOption.id ||\n                        subOption.subCategory.some((item: any) => item.id === active)\n                    }\n                >\n                    {handler(subOption.subCategory)}\n                </Tree>\n            );\n        });\n    };\n    return <>{handler(data?.data)}</>;\n};\n"]},"metadata":{},"sourceType":"module"}