{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/2012b/WebstormProjects/ecommerce-MERN/client-new/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/2012b/WebstormProjects/ecommerce-MERN/client-new/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/2012b/WebstormProjects/ecommerce-MERN/client-new/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\2012b\\\\WebstormProjects\\\\ecommerce-MERN\\\\client-new\\\\src\\\\components\\\\Product\\\\grid\\\\ProductGrid.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ProductCard from '../card/ProductItem';\nimport { useRouter } from 'next/router';\nimport { Button } from './loadmore-button';\nimport { Box } from './box'; // import { Button } from './button';\n\nimport { Grid } from './ProductGridStyles';\nimport { API_BASE_URL } from \"@/utils/config\";\nimport useFetch from \"@/hooks/useFetch\";\nexport var ProductGrid = function ProductGrid(_ref) {\n  _s();\n\n  var style = _ref.style,\n      _ref$loadMore = _ref.loadMore,\n      loadMore = _ref$loadMore === void 0 ? true : _ref$loadMore,\n      _ref$fetchLimit = _ref.fetchLimit,\n      fetchLimit = _ref$fetchLimit === void 0 ? 16 : _ref$fetchLimit;\n  var router = useRouter();\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var url = function url() {\n    var _router$query = router.query,\n        category = _router$query.category,\n        subCategory = _router$query.subCategory,\n        query = _router$query.query;\n\n    if (query) {\n      return \"\".concat(API_BASE_URL, \"/api/v1/products/search?query=\").concat(query);\n    }\n\n    if (category) {\n      var categoryQuery = category ? \"category=\".concat(category) : '';\n      var subcategoryQuery = subCategory ? \"subCategory=\".concat(subCategory) : '';\n      return \"\".concat(API_BASE_URL, \"/api/v1/products/?\").concat(categoryQuery, \"&\").concat(subcategoryQuery);\n    } else {\n      return \"\".concat(API_BASE_URL, \"/api/v1/products/similar/sas\");\n    }\n  };\n\n  var _useFetch = useFetch(url()),\n      _useFetch2 = _slicedToArray(_useFetch, 2),\n      data = _useFetch2[0],\n      isLoading = _useFetch2[1]; // const { data, error } = useProducts({\n  //     type,\n  //     text: router.query.text,\n  //     category: router.query.category,\n  //     offset: 0,\n  //     limit: fetchLimit,\n  // });\n\n\n  if (!data) return null;\n\n  var handleLoadMore = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true); // await fetchMore(Number(data.length), fetchLimit);\n\n              setLoading(false);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleLoadMore() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var renderCard = function renderCard(props) {\n    return /*#__PURE__*/_jsxDEV(ProductCard, {\n      title: props.title,\n      image: props.thumbImage,\n      price: props.price,\n      product: props\n    }, props._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, _this);\n  }; // const { items, hasMore } = data.products;\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      style: style,\n      children: data.data.map(function (product, idx) {\n        return renderCard(product);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, _this), loadMore && (data === null || data === void 0 ? void 0 : data.hasMore) && /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        textAlign: 'center'\n      },\n      mt: '2rem',\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleLoadMore,\n        loading: loading,\n        variant: \"secondary\",\n        style: {\n          fontSize: 14,\n          display: 'inline-flex'\n        },\n        border: \"1px solid #f1f1f1\",\n        children: \"Load More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(ProductGrid, \"9DcfoVQiF9MnDka8zzw8+UGqzLk=\", false, function () {\n  return [useRouter, useFetch];\n});\n\n_c = ProductGrid;\nexport default ProductGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductGrid\");","map":{"version":3,"sources":["C:/Users/2012b/WebstormProjects/ecommerce-MERN/client-new/src/components/Product/grid/ProductGrid.tsx"],"names":["React","useState","ProductCard","useRouter","Button","Box","Grid","API_BASE_URL","useFetch","ProductGrid","style","loadMore","fetchLimit","router","loading","setLoading","url","query","category","subCategory","categoryQuery","subcategoryQuery","data","isLoading","handleLoadMore","renderCard","props","title","thumbImage","price","_id","map","product","idx","hasMore","textAlign","fontSize","display"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport ProductCard  from '../card/ProductItem';\r\nimport { useRouter } from 'next/router';\r\nimport { Button } from './loadmore-button';\r\nimport { Box } from './box';\r\n\r\n// import { Button } from './button';\r\n\r\nimport {Grid} from './ProductGridStyles'\r\nimport {API_BASE_URL} from \"@/utils/config\";\r\nimport useFetch from \"@/hooks/useFetch\";\r\ninterface Props {\r\n    loadMore?: boolean;\r\n    fetchLimit?: number;\r\n    style?: any;\r\n}\r\n\r\nexport const ProductGrid = ({\r\n                                style,\r\n                                loadMore = true,\r\n                                fetchLimit = 16,\r\n                            }: Props) => {\r\n    const router = useRouter();\r\n    const [loading, setLoading] = useState(false);\r\n    const url=()=>{\r\n        const {category,subCategory,query}=router.query\r\n        if(query){\r\n                return `${API_BASE_URL}/api/v1/products/search?query=${query}`\r\n        }\r\n        if (category){\r\n            const categoryQuery=category?`category=${category}`:''\r\n            const subcategoryQuery=subCategory?`subCategory=${subCategory}`:''\r\n            return `${API_BASE_URL}/api/v1/products/?${categoryQuery}&${subcategoryQuery}`\r\n        }\r\n        else{\r\n            return `${API_BASE_URL}/api/v1/products/similar/sas`\r\n        }\r\n    }\r\n    const [data, isLoading]=useFetch(url())\r\n\r\n    // const { data, error } = useProducts({\r\n    //     type,\r\n    //     text: router.query.text,\r\n    //     category: router.query.category,\r\n    //     offset: 0,\r\n    //     limit: fetchLimit,\r\n    // });\r\n\r\n    if (!data) return null;\r\n    const handleLoadMore = async () => {\r\n        setLoading(true);\r\n        // await fetchMore(Number(data.length), fetchLimit);\r\n        setLoading(false);\r\n    };\r\n    const renderCard = (props) => {\r\n\r\n        return (\r\n            <ProductCard\r\n                title={props.title} image={props.thumbImage}\r\n                price={props.price} key={props._id} product={props}\r\n            />\r\n        );\r\n    }\r\n    // const { items, hasMore } = data.products;\r\n    return (\r\n        <section>\r\n            <Grid style={style}>\r\n                {data.data.map((product, idx) => (\r\n                    renderCard(product)\r\n                ))}\r\n            </Grid>\r\n\r\n            {loadMore && data?.hasMore && (\r\n                <Box style={{ textAlign: 'center' }} mt={'2rem'}>\r\n                    <Button\r\n                        onClick={handleLoadMore}\r\n                        loading={loading}\r\n                        variant='secondary'\r\n                        style={{\r\n                            fontSize: 14,\r\n                            display: 'inline-flex',\r\n                        }}\r\n                        border='1px solid #f1f1f1'\r\n                    >\r\n                        Load More\r\n                    </Button>\r\n                </Box>\r\n            )}\r\n        </section>\r\n    );\r\n};\r\nexport default ProductGrid"]},"metadata":{},"sourceType":"module"}