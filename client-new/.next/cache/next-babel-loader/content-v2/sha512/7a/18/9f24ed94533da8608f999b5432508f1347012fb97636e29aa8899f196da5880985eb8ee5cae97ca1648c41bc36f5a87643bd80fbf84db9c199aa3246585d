{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport http from './httpInstance';\nimport axios from 'axios';\nconst memStore = {};\n\nconst useFetch = (url, props = {}, axiosOptions = {}) => {\n  console.log(url);\n  const {\n    0: data,\n    1: setData\n  } = useState(null);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: shouldRefetch,\n    1: reFetch\n  } = useState({});\n  useEffect(() => {\n    let unmounted = false;\n    let source = axios.CancelToken.source();\n\n    const getData = async () => {\n      setIsLoading(true);\n\n      try {\n        let httpConfig = _objectSpread(_objectSpread({\n          method: 'GET',\n          url: url\n        }, axiosOptions), {}, {\n          cancelToken: source.token\n        });\n\n        let res = await http(httpConfig);\n        console.log(res);\n\n        if (!unmounted) {\n          setIsLoading(false);\n          setData(res.data);\n          if (props.cache) memStore[url] = res.data;\n        }\n      } catch (err) {\n        if (!unmounted) {\n          console.log(err);\n          setIsLoading(false);\n          setError(err);\n        }\n      }\n    };\n\n    if (memStore[url] && !unmounted) {\n      setIsLoading(false);\n      setData(memStore[url]);\n    } else {\n      getData();\n    }\n\n    return () => {\n      unmounted = true;\n      source.cancel(`${url} canceled`);\n    };\n  }, [url, shouldRefetch]);\n  return [data, isLoading, error, reFetch];\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/home/hari/WebstormProjects/ecommerce-MERN/client-new/src/hooks/useFetch.ts"],"names":["useState","useEffect","http","axios","memStore","useFetch","url","props","axiosOptions","console","log","data","setData","isLoading","setIsLoading","error","setError","shouldRefetch","reFetch","unmounted","source","CancelToken","getData","httpConfig","method","cancelToken","token","res","cache","err","cancel"],"mappings":";;;;;;AAAA,SAAgBA,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,KAAP,MAA0C,OAA1C;AAKA,MAAMC,QAAuB,GAAG,EAAhC;;AAYA,MAAMC,QAAuB,GAAG,CAACC,GAAD,EAAMC,KAAK,GAAG,EAAd,EAAkBC,YAAY,GAAG,EAAjC,KAAwC;AACpEC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA,QAAM;AAAA,OAACK,IAAD;AAAA,OAAOC;AAAP,MAAkBZ,QAAQ,CAAM,IAAN,CAAhC;AACA,QAAM;AAAA,OAACa,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM;AAAA,OAACe,KAAD;AAAA,OAAQC;AAAR,MAAoBhB,QAAQ,CAAM,IAAN,CAAlC;AACA,QAAM;AAAA,OAACiB,aAAD;AAAA,OAAgBC;AAAhB,MAA2BlB,QAAQ,CAAC,EAAD,CAAzC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkB,SAAS,GAAG,KAAhB;AACA,QAAIC,MAAM,GAAGjB,KAAK,CAACkB,WAAN,CAAkBD,MAAlB,EAAb;;AACA,UAAME,OAAO,GAAG,YAAY;AACxBR,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAI;AACA,YAAIS,UAA8B;AAC9BC,UAAAA,MAAM,EAAE,KADsB;AAE9BlB,UAAAA,GAAG,EAAEA;AAFyB,WAG3BE,YAH2B;AAI9BiB,UAAAA,WAAW,EAAEL,MAAM,CAACM;AAJU,UAAlC;;AAMA,YAAIC,GAAG,GAAG,MAAMzB,IAAI,CAACqB,UAAD,CAApB;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ;;AACA,YAAI,CAACR,SAAL,EAAgB;AACZL,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,UAAAA,OAAO,CAACe,GAAG,CAAChB,IAAL,CAAP;AACA,cAAIJ,KAAK,CAACqB,KAAV,EAAiBxB,QAAQ,CAACE,GAAD,CAAR,GAAgBqB,GAAG,CAAChB,IAApB;AACpB;AACJ,OAdD,CAcE,OAAOkB,GAAP,EAAY;AACV,YAAI,CAACV,SAAL,EAAgB;AACZV,UAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAZ;AACAf,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAACa,GAAD,CAAR;AACH;AACJ;AACJ,KAvBD;;AAyBA,QAAIzB,QAAQ,CAACE,GAAD,CAAR,IAAiB,CAACa,SAAtB,EAAiC;AAC7BL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,OAAO,CAACR,QAAQ,CAACE,GAAD,CAAT,CAAP;AACH,KAHD,MAGO;AACHgB,MAAAA,OAAO;AACV;;AAED,WAAO,MAAM;AACTH,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,MAAM,CAACU,MAAP,CAAe,GAAExB,GAAI,WAArB;AACH,KAHD;AAIH,GAvCQ,EAuCN,CAACA,GAAD,EAAMW,aAAN,CAvCM,CAAT;AAyCA,SAAO,CAACN,IAAD,EAAOE,SAAP,EAAkBE,KAAlB,EAAyBG,OAAzB,CAAP;AACH,CAjDD;;AAmDA,eAAeb,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport http from './httpInstance';\nimport axios, { AxiosRequestConfig } from 'axios';\n\ninterface memStoreTypes {\n    [x: string]: string;\n}\nconst memStore: memStoreTypes = {};\n\ninterface useFetchProps {\n    (\n        url: string,\n        props?: {\n            cache?: boolean;\n        },\n        axiosOptions?: AxiosRequestConfig\n    ): [any, boolean, any, React.Dispatch<React.SetStateAction<{}>>];\n}\n\nconst useFetch: useFetchProps = (url, props = {}, axiosOptions = {}) => {\n    console.log(url)\n    const [data, setData] = useState<any>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<any>(null);\n    const [shouldRefetch, reFetch] = useState({});\n\n    useEffect(() => {\n        let unmounted = false;\n        let source = axios.CancelToken.source();\n        const getData = async () => {\n            setIsLoading(true);\n            try {\n                let httpConfig: AxiosRequestConfig = {\n                    method: 'GET',\n                    url: url,\n                    ...axiosOptions,\n                    cancelToken: source.token\n                };\n                let res = await http(httpConfig);\n                console.log(res)\n                if (!unmounted) {\n                    setIsLoading(false);\n                    setData(res.data);\n                    if (props.cache) memStore[url] = res.data;\n                }\n            } catch (err) {\n                if (!unmounted) {\n                    console.log(err);\n                    setIsLoading(false);\n                    setError(err);\n                }\n            }\n        };\n\n        if (memStore[url] && !unmounted) {\n            setIsLoading(false);\n            setData(memStore[url]);\n        } else {\n            getData();\n        }\n\n        return () => {\n            unmounted = true;\n            source.cancel(`${url} canceled`);\n        };\n    }, [url, shouldRefetch]);\n\n    return [data, isLoading, error, reFetch];\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}