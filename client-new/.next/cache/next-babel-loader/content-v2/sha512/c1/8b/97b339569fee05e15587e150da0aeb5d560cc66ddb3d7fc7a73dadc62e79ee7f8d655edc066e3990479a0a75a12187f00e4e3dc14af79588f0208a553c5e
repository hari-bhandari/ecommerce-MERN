{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\2012b\\\\WebstormProjects\\\\ecommerce-MERN\\\\client-new\\\\src\\\\features\\\\checkouts\\\\StripePaymentForm.tsx\";\nimport React from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from \"axios\";\nimport { API_BASE_URL } from \"@/utils/config\";\nimport StripeFormWrapper, { Heading, FieldWrapper } from './stripe.style';\nimport { useSelector } from \"react-redux\";\nimport Toast from 'light-toast';\nconst stripePromise = loadStripe('pk_test_51HR1HeEbiqPmtL9pHZqB2BQzFzjisQybiUnf6wzJHj1UD4stgUOuzQLLfcxowVS0c8RhEAAIRVO643Mu4QSsE3jk007D69CHI7');\n\nconst StripeForm = ({\n  getToken\n}) => {\n  // Get a reference to Stripe or Elements using hooks.\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async () => {\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Use elements.getElement to get a reference to the mounted Element.\n    // Pass the Element directly to other Stripe.js methods:\n    // e.g. createToken - https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement\n\n\n    Toast.loading('loading');\n    const token = await getToken();\n    const {\n      paymentIntent\n    } = await stripe.confirmCardPayment(token.token, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: '2012bhandari.ha@gmail.com'\n        }\n      }\n    });\n\n    if (paymentIntent.status === \"succeeded\") {\n      const {\n        data\n      } = await axios.put(`${API_BASE_URL}/api/v1/order/${token.createdOrder._id}/pay`, {\n        id: paymentIntent.id,\n        status: paymentIntent.status,\n        update_time: paymentIntent.created,\n        email_address: paymentIntent.receipt_email\n      });\n\n      if (data) {\n        Toast.hide();\n        Toast.success('');\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StripeFormWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      children: \"Enter card info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FieldWrapper, {\n      children: /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleSubmit,\n      children: \"Pay Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\nconst StripePaymentForm = ({\n  item: {\n    price,\n    buttonText\n  }\n}) => {\n  const billing = useSelector(state => state.shopReducer);\n  const cartState = useSelector(state => state.cartReducer);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  const sendTokenToServer = async () => {\n    const {\n      data\n    } = await axios.post(`${API_BASE_URL}/api/v1/order/`, {\n      orderItems: cartState,\n      paymentMethod: \"card\",\n      itemsPrice: 500,\n      taxPrice: 20,\n      shippingPrice: 4,\n      totalPrice: price,\n      shippingAddress: billing.address,\n      name: billing.billing.name,\n      number: billing.billing.number\n    }, config);\n    return data;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripePromise,\n    children: /*#__PURE__*/_jsxDEV(StripeForm, {\n      getToken: () => sendTokenToServer()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\nexport default StripePaymentForm;","map":{"version":3,"sources":["C:/Users/2012b/WebstormProjects/ecommerce-MERN/client-new/src/features/checkouts/StripePaymentForm.tsx"],"names":["React","loadStripe","Elements","CardElement","useStripe","useElements","axios","API_BASE_URL","StripeFormWrapper","Heading","FieldWrapper","useSelector","Toast","stripePromise","StripeForm","getToken","stripe","elements","handleSubmit","loading","token","paymentIntent","confirmCardPayment","payment_method","card","getElement","billing_details","email","status","data","put","createdOrder","_id","id","update_time","created","email_address","receipt_email","hide","success","StripePaymentForm","item","price","buttonText","billing","state","shopReducer","cartState","cartReducer","config","headers","sendTokenToServer","post","orderItems","paymentMethod","itemsPrice","taxPrice","shippingPrice","totalPrice","shippingAddress","address","name","number"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react';\r\nimport {loadStripe} from '@stripe/stripe-js';\r\nimport {\r\n    Elements,\r\n    CardElement,\r\n    useStripe,\r\n    useElements,\r\n} from '@stripe/react-stripe-js';\r\nimport axios from \"axios\";\r\nimport {API_BASE_URL} from \"@/utils/config\";\r\nimport StripeFormWrapper, {Heading, FieldWrapper} from './stripe.style';\r\nimport {useSelector} from \"react-redux\";\r\nimport Toast from 'light-toast';\r\nconst stripePromise = loadStripe('pk_test_51HR1HeEbiqPmtL9pHZqB2BQzFzjisQybiUnf6wzJHj1UD4stgUOuzQLLfcxowVS0c8RhEAAIRVO643Mu4QSsE3jk007D69CHI7');\r\n\r\nconst StripeForm = ({ getToken}) => {\r\n    // Get a reference to Stripe or Elements using hooks.\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n    const handleSubmit = async () => {\r\n        if (!stripe || !elements) {\r\n            // Stripe.js has not loaded yet. Make sure to disable\r\n            // form submission until Stripe.js has loaded.\r\n            return;\r\n        }\r\n        // Use elements.getElement to get a reference to the mounted Element.\r\n\r\n        // Pass the Element directly to other Stripe.js methods:\r\n        // e.g. createToken - https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement\r\n        Toast.loading('loading')\r\n        const token = await getToken()\r\n        const {paymentIntent} = await stripe.confirmCardPayment(token.token, {\r\n                payment_method: {\r\n                    card: elements.getElement(CardElement),\r\n                    billing_details: {\r\n                        email: '2012bhandari.ha@gmail.com',\r\n                    },\r\n                },\r\n            }\r\n        )\r\n        if (paymentIntent.status === \"succeeded\") {\r\n            const {data} = await axios.put(\r\n                `${API_BASE_URL}/api/v1/order/${token.createdOrder._id}/pay`,\r\n                {\r\n                    id: paymentIntent.id,\r\n                    status: paymentIntent.status,\r\n                    update_time: paymentIntent.created,\r\n                    email_address: paymentIntent.receipt_email\r\n                })\r\n            if(data){\r\n                Toast.hide()\r\n                Toast.success('')\r\n            }\r\n        }\r\n\r\n    }\r\n    return (\r\n        <StripeFormWrapper>\r\n            <Heading>Enter card info</Heading>\r\n            <FieldWrapper>\r\n                <CardElement/>\r\n            </FieldWrapper>\r\n            <button type=\"button\" onClick={handleSubmit}>\r\n                Pay Now\r\n            </button>\r\n        </StripeFormWrapper>\r\n    );\r\n};\r\ntype Item = {\r\n    item: {\r\n        price: any;\r\n        buttonText: string;\r\n    };\r\n};\r\nconst StripePaymentForm = ({item: {price, buttonText}}: Item) => {\r\n    const billing = useSelector((state: any) => state.shopReducer);\r\n    const cartState = useSelector((state: any) => state.cartReducer);\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }\r\n    const sendTokenToServer = async () => {\r\n        const {data} = await axios.post(\r\n            `${API_BASE_URL}/api/v1/order/`,\r\n            {\r\n                orderItems: cartState, paymentMethod: \"card\",\r\n                itemsPrice: 500,\r\n                taxPrice: 20,\r\n                shippingPrice: 4,\r\n                totalPrice: price,\r\n                shippingAddress: billing.address,\r\n                name: billing.billing.name,\r\n                number: billing.billing.number\r\n\r\n            },\r\n            config\r\n        )\r\n        return data\r\n    };\r\n\r\n    return (\r\n        <Elements stripe={stripePromise}>\r\n            <StripeForm\r\n                getToken={() => sendTokenToServer()}\r\n            />\r\n        </Elements>\r\n    );\r\n};\r\n\r\nexport default StripePaymentForm;\r\n"]},"metadata":{},"sourceType":"module"}